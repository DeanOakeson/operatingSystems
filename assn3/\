#include <math.h>
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

void *runner(void *param); // THREADS CALL THIS FUNCTION

int main(int argc, char *argv[]) {

  int *arr[10];

  pthread_t tid;
  pthread_attr_t attr;

  if (atoi(argv[1]) < 0) {
    fprintf(stderr, "%d must be >= 0\n", atoi(argv[1]));
    return -1;
  }

  ///////////////
  // THREADING //
  ///////////////

  pthread_attr_init(&attr);

  for (int i = 1; i <= (argc - 1); i++) {
    pthread_create(&tid, &attr, runner, argv[i]);
  }

  for (int i = 1; i <= (argc - 1); i++) {
    pthread_join(tid, (void **)&arr);
  }

  //////////////////
  // RETURN ARRAY //
  //////////////////

  int *myarray = *arr;         // NEW POINTER TO RETURN ARRAY //
  printf("argc = %d\n", argc); // DELETE LATEr

  for (int i = 0; 9 >= i; i++) { // PRINTS RETURN ARRAY //
    printf("%d  ", myarray[i]);
  }
  printf("\n");

  free(*arr);
}

void *runner(void *param) {

  printf("new thread\n");
  int factored = atoi(param);
  int *arr = (int *)malloc(10 * sizeof(int)); // RETURN ARRAY //
  int arrIndex = 0;

  if (factored % 2 == 0) {
    while (factored % 2 == 0) {
      arr[arrIndex] = 2;
      arrIndex += 1;
      factored = factored / 2;
    }
  }

  for (int i = 3; i <= sqrt(factored); i += 2) {
    if (factored % i == 0) {
      arr[arrIndex] = i;
      arrIndex += 1;
      factored = factored / i;
    } else {
      if (i == factored) {
        arr[arrIndex] = i;
      }
    }
  }

  return arr;
}
